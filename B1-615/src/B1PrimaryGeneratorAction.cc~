//
// ********************************************************************
// * License and Disclaimer                                           *
// *                                                                  *
// * The  Geant4 software  is  copyright of the Copyright Holders  of *
// * the Geant4 Collaboration.  It is provided  under  the terms  and *
// * conditions of the Geant4 Software License,  included in the file *
// * LICENSE and available at  http://cern.ch/geant4/license .  These *
// * include a list of copyright holders.                             *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.  Please see the license in the file  LICENSE  and URL above *
// * for the full disclaimer and the limitation of liability.         *
// *                                                                  *
// * This  code  implementation is the result of  the  scientific and *
// * technical work of the GEANT4 collaboration.                      *
// * By using,  copying,  modifying or  distributing the software (or *
// * any work based  on the software)  you  agree  to acknowledge its *
// * use  in  resulting  scientific  publications,  and indicate your *
// * acceptance of all terms of the Geant4 Software license.          *
// ********************************************************************
//
//
/// \file B1PrimaryGeneratorAction.cc
/// \brief Implementation of the B1PrimaryGeneratorAction class

#include "B1PrimaryGeneratorAction.hh"

#include "G4LogicalVolumeStore.hh"
#include "G4LogicalVolume.hh"
#include "G4Box.hh"
#include "G4RunManager.hh"
#include "G4ParticleGun.hh"
#include "G4ParticleTable.hh"
#include "G4ParticleDefinition.hh"
#include "G4SystemOfUnits.hh"
#include "Randomize.hh"

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

B1PrimaryGeneratorAction::B1PrimaryGeneratorAction()
: G4VUserPrimaryGeneratorAction(),
  fParticleGun(0), 
  fEnvelopeBox(0)
{
  G4int n_particle = 1;
  fParticleGun  = new G4ParticleGun(n_particle);

  // default particle kinematic
  G4ParticleTable* particleTable = G4ParticleTable::GetParticleTable();
  G4String particleName;
  G4ParticleDefinition* particle
    = particleTable->FindParticle(particleName="gamma");
  fParticleGun->SetParticleDefinition(particle);
  //ge xing tong xing yuan:isotropy
	// ge xiang tong xing
	G4double Position[3];
	G4double R = 0.5 * micrometer;
	
	G4double th = acos(1.0-2*G4UniformRand());
	G4double ph = G4UniformRand()*2.0*CLHEP::pi;
 
	Position[0] = sin(th)*cos(ph);
	Position[1] = sin(th)*sin(ph);
	Position[2] = cos(th);
 
	G4ThreeVector positionPri = G4ThreeVector(Position[0],Position[1],Position[2]);
	
	//define particle position
	fParticleGun->SetParticlePosition(R*positionPri);
	
	//get particle momentum direction
	G4double Direction[3];
	
	G4double theta = acos(1.0-G4UniformRand());
	G4double phi = G4UniformRand()*2.0*CLHEP::pi;
 
	Direction[0] = sin(theta)*cos(phi);
	Direction[1] = sin(theta)*sin(phi);
	Direction[2] = cos(theta);
 
	G4ThreeVector directPri = G4ThreeVector(Direction[0],Direction[1],Direction[2]);
	directPri.rotateUz(-positionPri);
 
	//define particle position
	fParticleGun->SetParticleMomentumDirection(directPri);
  fParticleGun->SetParticleEnergy(14*MeV);
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

B1PrimaryGeneratorAction::~B1PrimaryGeneratorAction()
{
  delete fParticleGun;
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

void B1PrimaryGeneratorAction::GeneratePrimaries(G4Event* anEvent)
{
  //this function is called at the begining of ecah event
  //

  // In order to avoid dependence of PrimaryGeneratorAction
  // on DetectorConstruction class we get Envelope volume
  // from G4LogicalVolumeStore.
  
    // for simplicity, it's thought as a circular surface source   
    /*G4double phi_1 = G4UniformRand() * 360 * deg;
	//central
	G4double r = 11.5 * std::sqrt(G4UniformRand());
	G4double x = r * std::cos(phi_1)*mm;
	G4double y = r * std::sin(phi_1)*mm;
	G4double z = -10*cm;//-10cmm
	G4ThreeVector Pos = G4ThreeVector(x, y, z);
	fParticleGun->SetParticlePosition(Pos);
    */
  
	fParticleGun->SetParticlePosition(G4ThreeVector(0,0,-10.*cm));

  fParticleGun->GeneratePrimaryVertex(anEvent);
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

